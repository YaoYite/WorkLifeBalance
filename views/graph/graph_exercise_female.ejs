<!DOCTYPE html>
<meta charset="utf-8">
<style>
body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.bar {
  fill: steelblue;
}


</style>

<body>
    <svg></svg>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script>
        // Set svg width & height
        var margin = {top: 0, right: 20, bottom: 30, left: 40},
            width = 1100 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        var tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("position", "absolute")
            .style("text-align", "center")
            .style("color", "white")
            .style("width", "50px")
            .style("height", "22px")
            .style("padding", "5px")
            .style("border", "2px")
            .style("font-size", "15px")
            .style("font-family", "Futura")
            .style("background", "black")
            .style("visibility", "hidden")
        
        var x0 = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1);

        var x1 = d3.scale.ordinal();

        var y = d3.scale.linear()
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x0)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .tickFormat(d3.format(".%"));

        var color = d3.scale.ordinal()
            .range(['springgreen', 'MediumAquamarine', 'burlywood', 'DarkSeaGreen', 'lightskyblue','lime','gray']);
        
        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
         .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        d3.csv("/csv/exercise_female.csv", function(data) {
            var categoriesNames = data.map(function(d) { return d['Whether participated in sufficient activity in last week (duration only)(c)']; });
            var ageGroups = d3.keys(data[0]).filter(function(key) { return key !== "Whether participated in sufficient activity in last week (duration only)(c)"; });
            
            data.forEach(function(d) {
            d.hours = ageGroups.map(function(age) { return {age: age, value: +d[age]}; });
            });

  x0.domain(categoriesNames);
  x1.domain(ageGroups).rangeRoundBands([0, x0.rangeBand()]);
  y.domain([0, d3.max(data, function(d) { return d3.max(d.hours, function(d) { return d.value; }); })]);

    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);


  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end");

  var pt = svg.selectAll(".pt")
      .data(data)
    .enter().append("g")
      .attr("class", "pt")
      .attr("transform", function(d) { return "translate(" + x0(d['Whether participated in sufficient activity in last week (duration only)(c)']) + ",0)"; })
  

  pt.selectAll("rect")
      .data(function(d) { return d.hours; })
    .enter().append("rect")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) { return x1(d.age); })
      .attr("y", function(d) { return y(d.value); })
      .attr("height", function(d) { return height - y(d.value); })
      .style("fill", function (d, i) {
                                    return color(i);
                                })
    .on("mouseover", function (d) {
                            d3.select(this).style("fill", "blue")
                            return tooltip.style("visibility", "visible").text(d.value);
                        })
    .on("mousemove", function (d) {
                            d3.select(this).style("fill", "blue");
                            return tooltip.style("top", (event.pageY - 10) + "px").style("left", (event.pageX + 10) + "px");
                        })
    .on("mouseout", function (d, i) {
                            d3.select(this).style("fill", color(i));
                            return tooltip.style('visibility', 'hidden');
                        });

  var legend = svg.selectAll(".legend")
      .data(ageGroups.slice())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(-900," + i * 20 + ")"; });

  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d; });
                })
            
    </script>
</body>
</html>